Given a dictionary and a string, find all the substrings that are valid words in dictionary. 
Given two object arrays of "id,weight" (sorted by weight), merge them together and create a one single array. If the "id"s are same values should be merged. Final resulting array should be sorted by weight. Result should be O(nlogn) in time complexity. 	 
Let's say I have a word "I love chicken", I can break the number of characters in each word, like so: [1] [4] [7] [1,4] [4,7], [1,4,7].  Now let's say I have a max = 5. The phrases with equal or fever than 5 characters are "[I], [love], and [I, love]. The longest phrase is [I,love], which contains 2 words.  Complete the Length function given. It has 2 parameters: 1) An array of integers, named array 2) A maximum number, named max.  int Careercup( int [] array, int max) { } Example test case 1: [3,1,2,3] 4 Output expected : 2
	
Find the largest and smallest number in a list. The list is stored as two sections, one in ascending order and the other in descending order.  input [ 2 3 4 5 6 7 10 9 8 7] smallest : 2 Largest 10
	
Given an Array A with n elements. Pick maximum number of elements from given array following the rule: 
1. We cannot pick A[i] and A[j] if absolute value of (A[i] - A[j]) > absolute value of (i - j) 
Example: {13,5,4} 
Ans: 2 
Pick 5 and 4.
	
Find the minimum of every sub-array of size k in an array of size n. 
O(n) solution required.
	
Searching for a string in a DOM tree. A complete working solution was required. Assume you have any string matching algorithm available. 
	
Given a directed graph G, duplicate the graph using minimum space.
	
Given two integer arrays list1 and list2 and an int target value. WAP to check if there exists such a sum, where one number taken from list1 and other from list2 to add up to become the target value. Return true if so, else return false.
	
Given a sparse matrix, implement below two methods: 
void set(int row, int col, int val) /*Update value at given row and col*/ 
int sum(int row, int col) /*give sum from top left corner to given row, col sub-matrix*/
	
Given a undirected graph with weights, return the sum of the weight of each path between two nodes (shortest path between two vertices). Assume there are no cycles. 
Example:
Input:
       A
       | 1
       B
   2 /   \ 3
    C     D
    
Output:
18
since 
A to B has weight 1
A to C has weight 3
A to D has weight 4
B to C has weight 2
B to D has weight 3
C to D has weight 5
Edit: Thanks, wangchenClark0512, forgot about C to D 
Edit2: @Lukas, The question is just the sum of the shortest paths between two vertices. Also, all edges are positive. 
Edit3: Assume the graph has no cycles, did not get to the follow-up, but follow-up probably is probably change your algorithm so that is works for cycles
	
		
Given a sparse matrix, implement below two methods: 
void set(int row, int col, int val) /*Update value at given row and col*/ 
int sum(int row, int col) /*give sum from top left corner to given row, col sub-matrix*/
	
You are given a graph with no cycles, each node representing different cities and there are stadiums for baseball games in all cities. 
Each node contains a value representing the population of the city, and a list of neighbors. (feel free to extend data structure) 
Every time there is a baseball game at a city, everyone from all the different cities will go to the city with the baseball game. 
Return the maximum traffic between a city and its neighbours when there is a game at that city, for all cities. (Does not have to be sorted) 
The total run-time after returning everything should be O(n). 
Examples:
Input:
1   2
 \ /
  5
 / \
4   3
Output:
1 14
2 13
3 12
4 11
5 4
Input:
         38
         /
        8
        /
      7
     /
1   2
 \ / \
  5   15
 / \
4   3
Output:
1 82
2 53
3 80
4 79
5 70
7 46
15 68
8 38
38 45
	
You have a bunch of light bulbs. Store them as you wish. Implement a function that tells you if the light is on or off given its index and another one that toggles the state of the light bulbs given a start and end index.
	
Given a length n, return the number of strings of length n that can be made up of the letters 'a', 'b', and 'c', where 
there can only be a maximum of 1 'b's and can only have up to two consecutive 'c's 
Example: 
findStrings(3) returns 19 
since the possible combinations are: aaa,aab,aac,aba,abc,aca,acb,baa,bac,bca,caa,cab,cac,cba,cbc,acc,bcc,cca,ccb
and the invalid combinations are: 
abb,bab,bba,bbb,bbc,bcb,cbb,ccc
	
Given a string return the longest palindrome that can be constructed by removing or shuffling characters. 
Example: 
'aha' -> 'aha' 
'ttaatta' -> ' ttaaatt' 
'abc' -> 'a' or 'b' or 'c' 
'gggaaa' -> 'gaaag' or 'aggga' 
Note if there are multiple correct answers you only need to return 1 palindrome.
	

