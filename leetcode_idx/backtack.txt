abc
Subsets = "a", "b", "ab", "ac", ...
Permuation = "abc","acb",

#################################################################################
Permutations	
    Given a collection of distinct numbers, return all possible permutations.
    For example,
    [1,2,3] have the following permutations:
    [
      [1,2,3],
      [1,3,2],
      [2,1,3],
      [2,3,1],
      [3,1,2],
      [3,2,1]
    ]

#################################################################################
Permutations II	
    Given a collection of numbers that might contain duplicates,
    return all possible unique permutations.
    For example,
    [1,1,2] have the following unique permutations:
    [
      [1,1,2],
      [1,2,1],
      [2,1,1]
    ]

#################################################################################
Palindrome Permutation	
    Given a string, determine if a permutation of the string could form a palindrome.
    For example,
    "code" -> False, "aab" -> True, "carerac" -> True.
    Hint:
    Consider the palindromes of odd vs even length. What difference do you notice?
    Count the frequency of each character.
    If each character occurs even number of times, then it must be a palindrome.
    How about character which occurs odd number of times?

#################################################################################
Palindrome Permutation II	
    Palindrome Permutation II
    Given a string s, return all the palindromic permutations (without duplicates) of it.
    Return an empty list if no palindromic permutation could be form.
    For example:
    Given s = "aabb", return ["abba", "baab"].
    Given s = "abc", return [].

#################################################################################
Subsets	
    Given a collection of integers that might contain duplicates, nums,
    return all possible subsets.
    Note: The solution set must not contain duplicate subsets.
    For example,
    If nums = [1,2,2], a solution is:
    [
      [2],
      [1],
      [1,2,2],
      [2,2],
      [1,2],
      []
    ]

#################################################################################
Subsets II	
    Given a collection of integers that might contain duplicates, nums,
    return all possible subsets.
    Note: The solution set must not contain duplicate subsets.
    For example,
    If nums = [1,2,2], a solution is:
    [
      [2],
      [1],
      [1,2,2],
      [2,2],
      [1,2],
      []
    ]

#################################################################################
Combinations 
    Given two integers n and k, return all possible combinations of k numbers
    out of 1 ... n.  For example,
    If n = 4 and k = 2, a solution is:
    [
      [2,4],
      [3,4],
      [2,3],
      [1,2],
      [1,3],
      [1,4],
    ]
Hint : Add and remove DFS

#################################################################################
Combination Sum	
    Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
    The same repeated number may be chosen from C unlimited number of times.
    Note:
    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.
    For example, given candidate set [2, 3, 6, 7] and target 7, 
    A solution set is: 
    [
      [7],
      [2, 2, 3]
    ]
#################################################################################
Combination Sum II	
    Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.
    Each number in C may only be used once in the combination.
    Note:
    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.
    For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
    A solution set is: 
    [
      [1, 7],
      [1, 2, 5],
      [2, 6],
      [1, 1, 6]
    ]
#################################################################################
Combination Sum III	
    Find all possible combinations of k numbers that add up to a number n,
    given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
    Example 1:
    Input: k = 3, n = 7
    Output:
    [[1,2,4]]
    Example 2:
    Input: k = 3, n = 9
    Output:
    [[1,2,6], [1,3,5], [2,3,4]]

#################################################################################
Combination Sum IV	
    Given an integer array with all positive numbers and no duplicates,
    find the number of possible combinations that add up to a positive integer target.
    Example:
    nums = [1, 2, 3]
    target = 4
    The possible combination ways are:
    (1, 1, 1, 1)
    (1, 1, 2)
    (1, 2, 1)
    (1, 3)
    (2, 1, 1)
    (2, 2)
    (3, 1)
    Note that different sequences are counted as different combinations.
    Therefore the output is 7.
    Follow up:
    What if negative numbers are allowed in the given array?
    How does it change the problem?
    What limitation we need to add to the question to allow negative numbers?

#################################################################################
Permutation Sequence	

#################################################################################
Permutation in String	

#################################################################################
Generalized Abbreviation	


#################################################################################
Generate Parentheses	
	Given n pairs of parentheses, write a function to generate all 
	combinations of well-formed parentheses.
	For example, given n = 3, a solution set is:
	[
	  "((()))",
	  "(()())",
	  "(())()",
	  "()(())",
	  "()()()"
	]

#################################################################################
 Generalized Abbreviation
    Write a function to generate the generalized abbreviations of a word.
    Example:
    Given word = "word", return the following list (order does not matter):
    ["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
    for k size word , total # of words = 2^k
    000 -> abc -> abc
    001 -> ab_ -> ab1
    010 -> a_c -> a1c
    011 -> a__ -> a2
    100 -> _bc -> 1bc
    101 -> _b_ -> 1b1
    110 -> __c -> 2c
    111 -> ___ -> 3

#################################################################################
Letter Combinations of a Phone Number	
    Given a digit string, return all possible letter combinations that the number could represent.
    A mapping of digit to letters (just like on the telephone buttons) is given below.
    Input:Digit string "23"
    Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
    Note:
    Although the above answer is in lexicographical order, your answer could be in any order you want.

#################################################################################
Restore IP Addresses	
    Given a string containing only digits, restore it by returning all possible valid IP address combinations.
    For example:
    Given "25525511135",
    return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)

#################################################################################
N-Queens
    The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
    Given an integer n, return all distinct solutions to the n-queens puzzle.
    Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.
    For example,
    There exist two distinct solutions to the 4-queens puzzle:
    [
     [".Q..",       Solution 1
      "...Q",
      "Q...",
      "..Q."],
     ["..Q.",       Solution 2
      "Q...",
      "...Q",
      ".Q.."]
    ]

#################################################################################
N-Queens II
    Instead outputting board configurations, return the total number of distinct solutions.

    https:    www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD316.9.html#contents
    Things to consider
    1.At max,# of queens in the ROW = 1.
    2.At max,# of queens in the col = 1
    3.At max,# of queen in the diagonal = 1. (upward + downward)

#################################################################################
Valid Sudoku	
Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.


A sudoku puzzle...


...and its solution numbers marked in red.

#################################################################################
Generate Parentheses 
    Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
    For example, given n = 3, a solution set is:
    [
      "((()))",
      "(()())",
      "(())()",
      "()(())",
      "()()()"
    ]
Hint : T(n) = 2 T(n-1)

#################################################################################
Restore IP Addresses
    Given a string containing only digits, restore it by returning all possible valid IP address combinations.
    For example:
    Given "25525511135",
    return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)

Hint : O(3^4)

#################################################################################



vim:tw=90:et:norl:
