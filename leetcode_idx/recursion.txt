#################################################################################
Invert Binary Tree 
         4
       /   \
      2     7
     / \   / \
    1   3 6   9
      to
         4
       /   \
      7     2
     / \   / \
    9   6 3   1

#################################################################################
Sum of Left Leaves
    Find the sum of all left leaves in a given binary tree.
    Example:
        3
       / \
      9  20
        /  \
       15   7
    There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.

#################################################################################
Path Sum
    Given a binary tree and a sum, determine if the tree has a root-to-leaf path 
    such that adding up all the values along the path equals the given sum.
    For example:
    Given the below binary tree and sum = 22,
                  5
                 / \
                4   8
               /   / \
              11  13  4
             /  \      \
            7    2      1
    return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

#################################################################################
Path Sum II  
    Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
    For example:
    Given the below binary tree and sum = 22,
                  5
                 / \
                4   8
               /   / \
              11  13  4
             /  \    / \
            7    2  5   1
    return
    [
       [5,4,11,2],
       [5,8,4,5]
    ]

#################################################################################
Path Sum III
    You are given a binary tree in which each node contains an integer value.
    Find the number of paths that sum to a given value.
    The path does not need to start or end at the root or a leaf, 
    but it must go downwards (traveling only from parent nodes to child nodes).
    The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
    Example:
    root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
          10
         /  \
        5   -3
       / \    \
      3   2   11
     / \   \
    3  -2   1
    Return 3. The paths that sum to 8 are:
    1.  5 -> 3
    2.  5 -> 2 -> 1
    3. -3 -> 11


#################################################################################
Diameter of Binary Tree (Global Max diameter technique)
    Given a binary tree, you need to compute the length of the diameter of the tree. 
    The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
    Example:
    Given a binary tree 
              1
             / \
            2   3
           / \     
          4   5    
    Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].
    Note: The length of path between two nodes is represented by the number of edges between them.

#################################################################################
Binary Tree Maximum Path Sum (Global Max value technique)
    Given a binary tree, find the maximum path sum.
    For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.
    For example:
    Given the below binary tree,
           1
          / \
         2   3
    Return 6.

#################################################################################
Binary Tree Paths
    Given a binary tree, return all root-to-leaf paths.
    For example, given the following binary tree:
       1
     /   \
    2     3
     \
      5
    All root-to-leaf paths are:
    ["1->2->5", "1->3"]

#################################################################################
Find Bottom Left Tree Value (Keep track of state globally)
    Given a binary tree, find the leftmost value in the last row of the tree.
    Example 1:
    Input:
        2
       / \
      1   3
    Output:
    1
    Example 2: 
    Input:
            1
           / \
          2   3
         /   / \
        4   5   6
           /
          7
    Output:
    7

#################################################################################
Target Sum
    You are given a list of non-negative integers, a1, a2, ..., an, and a target, S.
	Now you have 2 symbols + and -. For each integer,
	you should choose one from + and - as its new symbol.
    Find out how many ways to assign symbols to make sum of integers equal to target S.
    Example 1:
    Input: nums is [1, 1, 1, 1, 1], S is 3. 
    Output: 5
    Explanation: 
    -1+1+1+1+1 = 3
    +1-1+1+1+1 = 3
    +1+1-1+1+1 = 3
    +1+1+1-1+1 = 3
    +1+1+1+1-1 = 3
    There are 5 ways to assign symbols to make the sum of nums be target 3.
    Note:
    The length of the given array is positive and will not exceed 20.
    The sum of elements in the given array will not exceed 1000.
    Your output answer is guaranteed to be fitted in a 32-bit integer.

#################################################################################
Partition Equal Subset Sum
    Given a non-empty array containing only positive integers,
	find if the array can be partitioned into two subsets such that the
	sum of elements in both subsets is equal.
    Note:
    Each of the array element will not exceed 100.
    The array size will not exceed 200.
    Example 1:
    Input: [1, 5, 11, 5]
    Output: true
    Explanation: The array can be partitioned as [1, 5, 5] and [11].
    Example 2:
    Input: [1, 2, 3, 5]
    Output: false
    Explanation: The array cannot be partitioned into equal sum subsets.

#################################################################################

vim:tw=90:et:norl:
