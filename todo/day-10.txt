#################################################################################
96.  Convert Sorted List to Binary Search Tree
    Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
    For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
    Example:
    Given the sorted linked list: [-10,-3,0,5,9],
    One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:
          0
         / \
       -3   9
       /   /
     -10  5

#################################################################################
99.  Copy List with Random Pointer
    A linked list is given such that each node contains an additional random pointer which
    could point to any node in the list or null.
    Return a deep copy of the list.

#################################################################################
119. Delete Node in a Linked List
    Write a function to delete a node (except the tail) in a singly linked list, given only
    access to that node.
    Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node with value
    3, the linked list should become 1 -> 2 -> 4 after calling your function.

#################################################################################
182. Flatten Binary Tree to Linked List 
    Given a binary tree, flatten it to a linked list in-place.
    For example,
    Given
             1
            / \
           2   5
          / \   \
         3   4   6
    The flattened tree should look like:
       1
        \
         2
          \
           3
            \
             4
              \
               5
                \
                 6
    click to show hints.
    Hints:
    If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.

#################################################################################
183. Flatten Nested List Iterator
    Given a nested list of integers, implement an iterator to flatten it.
    Each element is either an integer, or a list -- whose elements may also be integers or other lists.
    Example 1:
    Given the list [[1,1],2,[1,1]],
    By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].
    Example 2:
    Given the list [1,[4,[6]]],
    By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].

#################################################################################
222. Insertion Sort List
    Sort a linked list using insertion sort.

#################################################################################
230. Intersection of Two Linked Lists
    Write a program to find the node at which the intersection of two singly linked lists begins.
    For example, the following two linked lists:
    A:          a1 → a2
                       ↘
                         c1 → c2 → c3
                       ↗            
    B:     b1 → b2 → b3
    begin to intersect at node c1.
    Notes:
    If the two linked lists have no intersection at all, return null.
    The linked lists must retain their original structure after the function returns.
    You may assume there are no cycles anywhere in the entire linked structure.
    Your code should preferably run in O(n) time and use only O(1) memory.

#################################################################################
259. Linked List Cycle
    Given a linked list, determine if it has a cycle in it.
    Follow up:
    Can you solve it without using extra space?

#################################################################################
260. Linked List Cycle II
    Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
    Note: Do not modify the linked list.
    Follow up:
    Can you solve it without using extra space?

#################################################################################
261. Linked List Random Node
    Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.
    Follow up:
    What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?
    Example:
    // Init a singly linked list [1,2,3].
    ListNode head = new ListNode(1);
    head.next = new ListNode(2);
    head.next.next = new ListNode(3);
    Solution solution = new Solution(head);
    // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.
    solution.getRandom();

#################################################################################
320. Merge Two Sorted Lists
    Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
    Example:
    Input: 1->2->4, 1->3->4
    Output: 1->1->2->3->4->4

#################################################################################
321. Merge k Sorted Lists
    Merge k sorted linked lists and return it as one sorted list. Analyze and describe its
    complexity.

#################################################################################
346. Nested List Weight Sum 
    Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
    Each element is either an integer, or a list -- whose elements may also be integers or other lists.
    Example 1:
    Given the list [[1,1],2,[1,1]], return 10. (four 1's at depth 2, one 2 at depth 1)

#################################################################################
347. Nested List Weight Sum II
    Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
    Each element is either an integer, or a list -- whose elements may also be integers or other lists.
    Different from the previous question where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight.
    Example 1:
    Given the list [[1,1],2,[1,1]], return 8. (four 1's at depth 1, one 2 at depth 2)

#################################################################################
366. Odd Even Linked List
    Given a singly linked list, group all odd nodes together followed by the even nodes.
    Please note here we are talking about the node number and not the value in the nodes.
    You should try to do it in place. The program should run in O(1) space complexity and
    O(nodes) time complexity.
    Example:
    Given 1->2->3->4->5->NULL,
    return 1->3->5->2->4->NULL.
    Note:
    The relative order inside both the even and odd groups should remain as it was in the
    input. 
    The first node is considered odd, the second node even and so on ...

#################################################################################
377. Palindrome Linked List
    Given a singly linked list, determine if it is a palindrome.
    Follow up:
    Could you do it in O(n) time and O(1) space?

#################################################################################
386. Partition List
    Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
    You should preserve the original relative order of the nodes in each of the two partitions.
    For example,
    Given 1->4->3->2->5->2 and x = 3,
    return 1->2->2->4->3->5.

#################################################################################
403. Plus One Linked List 
    Given a non-negative number represented as a singly linked list of digits, plus one to the number.
    The digits are stored such that the most significant digit is at the head of the list.
    Example:
    Input:
    1->2->3
    Output:
    1->2->4

#################################################################################
436. Remove Duplicates from Sorted List
    Given a sorted linked list, delete all duplicates such that each element appear only once.
    For example,
    Given 1->1->2, return 1->2.
    Given 1->1->2->3->3, return 1->2->3.

#################################################################################
437. Remove Duplicates from Sorted List II
    Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
    For example,
    Given 1->2->3->3->4->4->5, return 1->2->5.
    Given 1->1->1->2->3, return 2->3.

#################################################################################
441. Remove Linked List Elements
    Remove all elements from a linked list of integers that have value val.
    Example
    Given: 1 --> 2 --> 6 --> 3 --> 4 --> 5 --> 6, val = 6
    Return: 1 --> 2 --> 3 --> 4 --> 5

#################################################################################
442. Remove Nth Node From End of List
    Given a linked list, remove the nth node from the end of list and return its head.
    For example,
       Given linked list: 1->2->3->4->5, and n = 2.
       After removing the second node from the end, the linked list becomes 1->2->3->5.
    Note:
    Given n will always be valid.
    Try to do this in one pass.

#################################################################################
443. Reorder List
    Given a singly linked list L: L0→L1→…→Ln-1→Ln,
    reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
    You must do this in-place without altering the nodes' values.
    For example,
    Given {1,2,3,4}, reorder it to {1,4,2,3}.

#################################################################################
451. Reverse Linked List
    Reverse a singly linked list.
    click to show more hints.
    Hint:
    A linked list can be reversed either iteratively or recursively. Could you implement both?

#################################################################################
452. Reverse Linked List II
    Reverse a linked list from position m to n. Do it in-place and in one-pass.
    For example:
    Given 1->2->3->4->5->NULL, m = 2 and n = 4,
    return 1->4->3->2->5->NULL.
    Note:
    Given m, n satisfy the following condition:
    1 ≤ m ≤ n ≤ length of list.

#################################################################################
465. Rotate List
    Given a list, rotate the list to the right by k places, where k is non-negative.
    Example:
    Given 1->2->3->4->5->NULL and k = 2,
    return 4->5->1->2->3->NULL.

#################################################################################
504. Sort List
    Sort a linked list in O(n log n) time using constant space complexity.

#################################################################################
29 - problems
96.  Convert Sorted List to Binary Search Tree
99.  Copy List with Random Pointer
119. Delete Node in a Linked List
182. Flatten Binary Tree to Linked List : Recursion (visualization)
183. Flatten Nested List Iterator
222. Insertion Sort List
230. Intersection of Two Linked Lists
259. Linked List Cycle
260. Linked List Cycle II
261. Linked List Random Node
320. Merge Two Sorted Lists
321. Merge k Sorted Lists
346. Nested List Weight Sum 
347. Nested List Weight Sum II
366. Odd Even Linked List
377. Palindrome Linked List
386. Partition List
403. Plus One Linked List 
436. Remove Duplicates from Sorted List
437. Remove Duplicates from Sorted List II
441. Remove Linked List Elements
442. Remove Nth Node From End of List
443. Reorder List
451. Reverse Linked List
452. Reverse Linked List II
465. Rotate List
504. Sort List
#################################################################################
vim:tw=90:et:norl:
