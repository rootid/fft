#################################################################################
417. Range Sum Query - Immutable
    Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.
    Example:
    Given nums = [-2, 0, 3, -5, 2, -1]
    sumRange(0, 2) -> 1
    sumRange(2, 5) -> -1
    sumRange(0, 5) -> -3
    Note:
    1. You may assume that the array does not change.
    2. There are many calls to sumRange function.

#################################################################################
418. Range Sum Query - Mutable
    Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.
    The update(i, val) function modifies nums by updating the element at index i to val.
    Example:
    Given nums = [1, 3, 5]
    sumRange(0, 2) -> 9
    update(1, 2)
    sumRange(0, 2) -> 8
    Note:
    1. The array is only modifiable by the update function.
    2. You may assume the number of calls to update and sumRange function is distributed evenly.

#################################################################################
419. Range Sum Query 2D - Immutable
    Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
    Range Sum Query 2D
    The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.
    Example:
    Given matrix = [
      [3, 0, 1, 4, 2],
      [5, 6, 3, 2, 1],
      [1, 2, 0, 1, 5],
      [4, 1, 0, 1, 7],
      [1, 0, 3, 0, 5]
    ]
    sumRegion(2, 1, 4, 3) -> 8
    sumRegion(1, 1, 2, 2) -> 11
    sumRegion(1, 2, 2, 4) -> 12
    Note:
    1. You may assume that the matrix does not change.
    2. There are many calls to sumRegion function.
    3. You may assume that row1 ≤ row2 and col1 ≤ col2.

#################################################################################
420. Range Sum Query 2D - Mutable
    Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
    Range Sum Query 2D
    The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.
    Example:
    Given matrix = [
      [3, 0, 1, 4, 2],
      [5, 6, 3, 2, 1],
      [1, 2, 0, 1, 5],
      [4, 1, 0, 1, 7],
      [1, 0, 3, 0, 5]
    ]
    sumRegion(2, 1, 4, 3) -> 8
    update(3, 2, 2)
    sumRegion(2, 1, 4, 3) -> 10
    Note:
    1. The matrix is only modifiable by the update function.
    2. You may assume the number of calls to update and sumRegion function is distributed evenly.
    3. You may assume that row1 ≤ row2 and col1 ≤ col2.

#################################################################################
509. Split Array Largest Sum
    Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.
    Note:
    If n is the length of array, assume the following constraints are satisfied:
    1 ≤ n ≤ 1000
    1 ≤ m ≤ min(50, n)
    Examples:
    Input:
    nums = [7,2,5,10,8]
    m = 2
    Output:
    18
    Explanation:
    There are four ways to split nums into two subarrays.
    The best way is to split it into [7,2,5] and [10,8],
    where the largest sum among the two subarrays is only 18.

#################################################################################
510. Split Array into Consecutive Subsequences
    You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.
    Example 1:
    Input: [1,2,3,3,4,5]
    Output: True
    Explanation:
    You can split them into two consecutive subsequences : 
    1, 2, 3
    3, 4, 5
    Example 2:
    Input: [1,2,3,3,4,4,5,5]
    Output: True
    Explanation:
    You can split them into two consecutive subsequences : 
    1, 2, 3, 4, 5
    3, 4, 5
    Example 3:
    Input: [1,2,3,4,4,5]
    Output: False
    Note:
    1. The length of the input is in range of [1, 10000]

#################################################################################
511. Split Array with Equal Sum
    Given an array with n integers, you need to find if there are triplets (i, j, k) which satisfies following conditions:
    1. 0 < i, i + 1 < j, j + 1 < k < n - 1
    2. Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal.
    where we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.
    Example:
    Input: [1,2,1,2,1,2,1]
    Output: True
    Explanation:
    i = 1, j = 3, k = 5. 
    sum(0, i - 1) = sum(0, 0) = 1
    sum(i + 1, j - 1) = sum(2, 2) = 1
    sum(j + 1, k - 1) = sum(4, 4) = 1
    sum(k + 1, n - 1) = sum(6, 6) = 1
    Note:
    1. 1 <= n <= 2000.
    2. Elements in the given array will be in range [-1,000,000, 1,000,000].

#################################################################################
523. Subarray Sum Equals K : Presum DP
    Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.
    Example 1:
    Input:nums = [1,1,1], k = 2
    Output: 2
    Note:
    The length of the array is in range [1, 20,000].
    The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].

#################################################################################
529. Sum Root to Leaf Numbers
    Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
    An example is the root-to-leaf path 1->2->3 which represents the number 123.
    Find the total sum of all root-to-leaf numbers.
    For example,
        1
       / \
      2   3
    The root-to-leaf path 1->2 represents the number 12.
    The root-to-leaf path 1->3 represents the number 13.
    Return the sum = 12 + 13 = 25.

#################################################################################
530. Sum of Left Leaves : sum += SL(root.left, true) + SL(root.right, false); (clock pattern)
Find the sum of all left leaves in a given binary tree.
Example:
    3
   / \
  9  20
    /  \
   15   7
There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.

#################################################################################
10 - Problems
417. Range Sum Query - Immutable
418. Range Sum Query - Mutable
419. Range Sum Query 2D - Immutable
420. Range Sum Query 2D - Mutable
509. Split Array Largest Sum
510. Split Array into Consecutive Subsequences
511. Split Array with Equal Sum
523. Subarray Sum Equals K : Presum DP
529. Sum Root to Leaf Numbers
530. Sum of Left Leaves : sum += SL(root.left, true) + SL(root.right, false); (clock pattern)
#################################################################################
vim:tw=90:et:norl:

