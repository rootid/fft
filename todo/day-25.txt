#################################################################################
Decode Ways
   A message containing letters from A-Z is being encoded to numbers using the following
  mapping:
  'A' -> 1
  'B' -> 2
  ...
  'Z' -> 26
  Given an encoded message containing digits, determine the total number of ways to decode
  it.
  For example,
  Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).
  The number of ways decoding "12" is 2.

#################################################################################
Decode Ways II
   A message containing letters from A-Z is being encoded to numbers using the following
  mapping way:
  'A' -> 1
  'B' -> 2
  ...
  'Z' -> 26
  Beyond that, now the encoded string can also contain the character '*', which can be
  treated as one of the numbers from 1 to 9.
  Given the encoded message containing digits and the character '*', return the total number
  of ways to decode it.
  Also, since the answer may be very large, you should return the output mod 109 + 7.
  Example 1:
  Input: "*"
  Output: 9
  Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E",
  "F", "G", "H", "I".
  Example 2:
  Input: "1*"
  Output: 9 + 9 = 18
  Note:
      The length of the input string will fit in range [1, 105].
      The input string will only contain the character '*' and digits '0' - '9'.

#################################################################################
Scramble String
 Given a string s1, we may represent it as a binary tree by partitioning it to two
non-empty substrings recursively.
Below is one possible representation of s1 = "great":
    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.
For example, if we choose the node "gr" and swap its two children, it produces a scrambled
string "rgeat".
    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".
Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a
scrambled string "rgtae".
    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".
Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of
s1.

#################################################################################
Maximal Rectangle
 Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing
only 1's and return its area.
For example, given the following matrix:
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 6.

#################################################################################
Edit Distance
 Given two words word1 and word2, find the minimum number of steps required to convert
word1 to word2. (each operation is counted as 1 step.)
You have the following 3 operations permitted on a word:
a) Insert a character
b) Delete a character
c) Replace a character

#################################################################################
Climbing Stairs
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to
the top?
Note: Given n will be a positive integer.
Example 1:
Input: 2
Output:  2
Explanation:  There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:
Input: 3
Output:  3
Explanation:  There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

#################################################################################
Minimum Path Sum
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom
right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
Example 1:
[[1,3,1],
 [1,5,1],
 [4,2,1]]
Given the above grid map, return 7. Because the path 1→3→1→1→1 minimizes the sum.

#################################################################################
Unique Paths II
Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there
be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.
Note: m and n will be at most 100.

#################################################################################
Unique Paths
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram
below).
The robot can only move either down or right at any point in time. The robot is trying to
reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?
Above is a 3 x 7 grid. How many possible unique paths are there?
Note: m and n will be at most 100.

#################################################################################
Maximum Subarray
 Find the contiguous subarray within an array (containing at least one number) which has
the largest sum.
For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
click to show more practice.
More practice:
If you have figured out the O(n) solution, try coding another solution using the divide
and conquer approach, which is more subtle.

#################################################################################
Wildcard Matching
  Implement wildcard pattern matching with support for '?' and '*'.
  '?' Matches any single character.
  '*' Matches any sequence of characters (including the empty sequence).
  The matching should cover the entire input string (not partial).
  The function prototype should be:
  bool isMatch(const char *s, const char *p)
  Some examples:
  isMatch("aa","a") → false
  isMatch("aa","aa") → true
  isMatch("aaa","aa") → false
  isMatch("aa", "*") → true
  isMatch("aa", "a*") → true
  isMatch("ab", "?*") → true
  isMatch("aab", "c*a*b") → false

#################################################################################
Longest Valid Parentheses
  Given a string containing just the characters '(' and ')', find the length of the longest
  valid (well-formed) parentheses substring.
  For "(()", the longest valid parentheses substring is "()", which has length = 2.
  Another example is ")()())", where the longest valid parentheses substring is "()()",
  which has length = 4.

#################################################################################
Regular Expression Matching
  Implement regular expression matching with support for '.' and '*'.
  '.' Matches any single character.
  '*' Matches zero or more of the preceding element.
  The matching should cover the entire input string (not partial).
  The function prototype should be:
  bool isMatch(const char *s, const char *p)
  Some examples:
  isMatch("aa","a") → false
  isMatch("aa","aa") → true
  isMatch("aaa","aa") → false
  isMatch("aa", "a*") → true
  isMatch("aa", ".*") → true
  isMatch("ab", ".*") → true
  isMatch("aab", "c*a*b") → true

#################################################################################
Decode Ways
Scramble String
Maximal Rectangle
Edit Distance
Climbing Stairs
Minimum Path Sum
Unique Paths II
Unique Paths
Maximum Subarray
Wildcard Matching
Longest Valid Parentheses
Regular Expression Matching

#################################################################################
vim:tw=90:et:norl:
