#################################################################################
100. Count Complete Tree Nodes
    Given a complete binary tree, count the number of nodes.
    Definition of a complete binary tree from Wikipedia:
    In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

#################################################################################
104. Count Univalue Subtrees
    Given a binary tree, count the number of uni-value subtrees.
    A Uni-value subtree means all nodes of the subtree have the same value.
    For example:
    Given binary tree,
              5
             / \
            1   5
           / \   \
          5   5   5
 
    return 4.

#################################################################################
113. Cut Off Trees for Golf Event
    You are asked to cut off trees in a forest for a golf event. The forest is represented as a non-negative 2D map, in this map:
    0 represents the obstacle can't be reached.
    1 represents the ground can be walked through.
    The place with number bigger than 1 represents a tree can be walked through, and this positive number represents the tree's height.
    You are asked to cut off all the trees in this forest in the order of tree's height - always cut off the tree with lowest height first. And after cutting, the original place has the tree will become a grass (value 1).
    You will start from the point (0, 0) and you should output the minimum steps you need to walk to cut off all the trees. If you can't cut off all the trees, output -1 in that situation.
    You are guaranteed that no two trees have the same height and there is at least one tree needs to be cut off.
    Example 1:
    Input: 
    [
     [1,2,3],
     [0,0,4],
     [7,6,5]
    ]
    Output: 6
    Example 2:
    Input: 
    [
     [1,2,3],
     [0,0,0],
     [7,6,5]
    ]
    Output: -1
    Example 3:
    Input: 
    [
     [2,3,4],
     [0,0,5],
     [8,7,6]
    ]
    Output: 6
    Explanation: You started from the point (0,0) and you can cut off the tree in (0,0) directly without walking.
    Hint: size of the given matrix will not exceed 50x50.

#################################################################################
13.  Add One Row to Tree
    Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.
    The adding rule is: given a positive integer depth d, for each NOT null tree nodes N in depth d-1, create two tree nodes with value v as N's left subtree root and right subtree root. And N's original left subtree should be the left subtree of the new left subtree root, its original right subtree should be the right subtree of the new right subtree root. If depth d is 1 that means there is no depth d-1 at all, then create a tree node with value v as the new root of the whole original tree, and the original tree is the new root's left subtree.
    Example 1:
    Input: 
    A binary tree as following:
         4
       /   \
      2     6
     / \   / 
    3   1 5   
    v = 1
    d = 2
    Output: 
           4
          / \
         1   1
        /     \
       2       6
      / \     / 
     3   1   5   
    Example 2:
    Input: 
    A binary tree as following:
          4
         /   
        2    
       / \   
      3   1    
    v = 1
    d = 3
    Output: 
          4
         /   
        2
       / \    
      1   1
     /     \  
    3       1
    Note:
    The given d is in range [1, maximum depth of the given tree + 1].
    The given binary tree has at least one tree node.

#################################################################################
133. Diameter of Binary Tree 
    Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
    Example:
    Given a binary tree 
          1
         / \
        2   3
       / \     
      4   5    
    Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].
    Note: The length of path between two nodes is represented by the number of edges between them.

#################################################################################
145. Equal Tree Partition
    Given a binary tree with n nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing exactly one edge on the original tree.
    Example 1:
    Input:     
    5
   / \
  10 10
    /  \
   2   3
    Output: True
    Explanation: 
    5
   / 
  10
      
    Sum: 15
   10
  /  \
 2    3
    Sum: 15
    Example 2:
    Input:     
    1
   / \
  2  10
    /  \
   2   20
    Output: False
    Explanation: You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.
    Note:
    The range of tree node value is in the range of [-100000, 100000].
1 <= n <= 10000

#################################################################################
158. Find Bottom Left Tree Value 
    Given a binary tree, find the leftmost value in the last row of the tree.
    Example 1:
    Input:
        2
       / \
      1   3
    Output:
    1
    Example 2: 
    Input:
        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7
    Output:
    7
    Note: You may assume the tree (i.e., the given root node) is not NULL.

#################################################################################
160. Find Duplicate Subtrees
    Given a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, you only need to return the root node of any one of them.
    Two trees are duplicate if they have the same structure with same node values.
    Example 1: 
        1
       / \
      2   3
     /   / \
    4   2   4
       /
      4
    The following are two duplicate subtrees:
      2
     /
    4
    and
    4
    Therefore, you need to return above trees' root in the form of a list.

#################################################################################
163. Find Largest Value in Each Tree Row
    You need to find the largest value in each row of a binary tree.
    Example:
    Input: 
          1
         / \
        3   2
       / \   \  
      5   3   9 
    Output: [1, 3, 9]

#################################################################################
164. Find Leaves of Binary Tree 
    Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.
    Example:
    Given binary tree
           1
         / \
        2   3
       / \     
      4   5    
    Returns [4, 5, 3], [2], [1].

#################################################################################
168. Find Mode in Binary Search Tree
    Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.
    Assume a BST is defined as follows:
    The left subtree of a node contains only nodes with keys less than or equal to the node's key.
    The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
    Both the left and right subtrees must also be binary search trees.
    For example:
    Given BST [1,null,2,2],
   1
    \
     2
    /
   2
    return [2].
    Note: If a tree has more than one mode, you can return them in any order.
    Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).

#################################################################################
182. Flatten Binary Tree to Linked List 
    Given a binary tree, flatten it to a linked list in-place.
    For example,
    Given
         1
        / \
       2   5
      / \   \
     3   4   6
    The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
    click to show hints.
    Hints:
    If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.

#################################################################################
195. Graph Valid Tree
    Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.
 Notice
    You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.
    Example
    Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.
    Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false

#################################################################################
208. House Robber III 
    The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.
    Determine the maximum amount of money the thief can rob tonight without alerting the police.
    Example 1:
         3
        / \
       2   3
        \   \ 
         3   1
    Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
    Example 2:
         3
        / \
       4   5
      / \   \ 
     1   3   1
    Maximum amount of money the thief can rob = 4 + 5 = 9.

#################################################################################
214. Implement Trie (Prefix Tree)
    Implement a trie with insert, search, and startsWith methods.
    /** Inserts a word into the trie. */
        public void insert(String word);
    /** Returns if the word is in the trie. */
        public boolean search(String word);
    /** Returns if there is any word in the trie that starts with the given prefix. */
        public boolean startsWith(String prefix);
    /**
     * Your Trie object will be instantiated and called as such:
     * Trie obj = new Trie();
     * obj.insert(word);
     * boolean param_2 = obj.search(word);
     * boolean param_3 = obj.startsWith(prefix);
     */
    Note:
    You may assume that all inputs are consist of lowercase letters a-z.

#################################################################################
231. Invert Binary Tree
    Invert a binary tree.
         4
       /   \
      2     7
     / \   / \
    1   3 6   9
        to
         4
       /   \
      7     2
     / \   / \
    9   6 3   1

#################################################################################
249. Largest BST Subtree
    Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.

#################################################################################
256. Lexicographical Numbers 
    Given an integer n, return 1 - n in lexicographical order.
    For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].
    Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.

#################################################################################
28.  Average of Levels in Binary Tree
    Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.
    Example 1:
    Input:
        3
       / \
      9  20
        /  \
       15   7
    Output: [3, 14.5, 11]
    Explanation:
    The average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].
    Note:
    The range of node's value is in the range of 32-bit signed integer.

#################################################################################
285. Lowest Common Ancestor of a Binary Search Tree 
    Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
    According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”
            _______6______
           /              \
        ___2__          ___8__
       /      \        /      \
       0      _4       7       9
             /  \
             3   5
    For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.

#################################################################################
286. Lowest Common Ancestor of a Binary Tree 
    Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
    According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”
        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
    For example, the lowest common ancestor (LCA) of nodes 5 and 1 is 3. Another example is LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

#################################################################################
29.  Balanced Binary Tree
    Given a binary tree, determine if it is height-balanced.
    For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

#################################################################################
300. Maximum Binary Tree
    Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:
    The root is the maximum number in the array.
    The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.
    The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.
    Construct the maximum tree by the given array and output the root node of this tree.
    Example 1:
    Input: [3,2,1,6,0,5]
    Output: return the tree root node representing the following tree:
      6
    /   \
   3     5
    \    / 
     2  0   
       \
        1
    Note:
    The size of the given array will be in the range [1,1000].

#################################################################################
301. Maximum Depth of Binary Tree 
    Given a binary tree, find its maximum depth.
    The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node

#################################################################################
312. Maximum Width of Binary Tree
    Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.
    The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.
    Example 1:
    Input: 
           1
         /   \
        3     2
       / \     \  
      5   3     9 
    Output: 4
    Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).
    Example 2:
    Input: 
          1
         /  
        3    
       / \       
      5   3     
    Output: 2
    Explanation: The maximum width existing in the third level with the length 2 (5,3).
    Example 3:
    Input: 
          1
         / \
        3   2 
       /        
      5      
    Output: 2
    Explanation: The maximum width existing in the second level with the length 2 (3,2).
    Example 4:
    Input: 
          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
    Output: 8
    Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).
    Note: Answer will in the range of 32-bit signed integer.

#################################################################################
319. Merge Two Binary Trees
    Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.
    You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.
    Example 1:
    Input: 
    Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
    Output: 
    Merged tree:
         3
        / \
       4   5
      / \   \ 
     5   4   7
    Note: The merging process must start from the root nodes of both trees.

#################################################################################
326. Minimum Depth of Binary Tree 
    Given a binary tree, find its minimum depth.
    The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

#################################################################################
328. Minimum Height Trees
    For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.
    Format
    The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).
    You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.
    Example 1:
    Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]
        0
        |
        1
       / \
      2   3
    return [1]
    Example 2:
    Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]
     0  1  2
      \ | /
        3
        |
        4
        |
        5
    return [3, 4]
    Note:
(1) According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”
(2) The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.

#################################################################################
340. Most Frequent Subtree Sum 
    Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.
    Examples 1
    Input:
      5
     /  \
    2   -3
    return [2, -3, 4], since all the values happen only once, return all of them in any order.
    Examples 2
    Input:
      5
     /  \
    2   -5
    return [2], since 2 happens twice, however -5 only occur once.
    Note: You may assume the sum of values in any subtree is in the range of 32-bit signed integer.

#################################################################################
100. Count Complete Tree Nodes
104. Count Univalue Subtrees
113. Cut Off Trees for Golf Event
13.  Add One Row to Tree
133. Diameter of Binary Tree : 1. R 2. R.left + R 3. R.right + R 4. R.right + R + R.left
145. Equal Tree Partition
158. Find Bottom Left Tree Value : Clock pattern (Preorder compare ht, maintain indices in clock manner)
160. Find Duplicate Subtrees
163. Find Largest Value in Each Tree Row
164. Find Leaves of Binary Tree : 1. h(node) = 1 + max(h(node.left), h(node.right)). 2. Pruning leaves
168. Find Mode in Binary Search Tree
182. Flatten Binary Tree to Linked List : Recursion (visualization)
195. Graph Valid Tree
208. House Robber III : [DP] => Bottom up tree traversal
214. Implement Trie (Prefix Tree)
231. Invert Binary Tree
249. Largest BST Subtree
256. Lexicographical Numbers : DFS (Multilevel D-Ary tree) D = [0-9]
28.  Average of Levels in Binary Tree
285. Lowest Common Ancestor of a Binary Search Tree : [Recursion, Iteration] 1. When to move left/right?
286. Lowest Common Ancestor of a Binary Tree : [Recursion, Iteration] 1. Traverse tree untill either of node found
29.  Balanced Binary Tree
300. Maximum Binary Tree
301. Maximum Depth of Binary Tree : Update ht when leaf node found
312. Maximum Width of Binary Tree
319. Merge Two Binary Trees
326. Minimum Depth of Binary Tree : Update ht when leaf node found
328. Minimum Height Trees
340. Most Frequent Subtree Sum : O(n) - Remember maxSumCount with HashMap , O(n^2) - Compute sum for each node and maintain freqMap
#################################################################################
vim:tw=90:et:norl:
