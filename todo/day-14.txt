https://towardsdatascience.com/course-1-algorithmic-toolbox-part-2-big-o-and-greedy-6265d9065f05
BFS -> Greedy 
DP -> Shortest Path

#################################################################################
Dota2 Senate	
    In the world of Dota2, there are two parties: the Radiant and the Dire.
    The Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:
    Ban one senator's right: 
    A senator can make another senator lose all his rights in this and all the following rounds.
    Announce the victory: 
    If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.
    Given a string representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party respectively. Then if there are n senators, the size of the given string will be n.
    The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.
    Suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be Radiant or Dire.
    Example 1:
    Input: "RD"
    Output: "Radiant"
    Explanation: The first senator comes from Radiant and he can just ban the next senator's right in the round 1. 
    And the second senator can't exercise any rights any more since his right has been banned. 
    And in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.
    Example 2:
    Input: "RDD"
    Output: "Dire"
    Explanation: 
    The first senator comes from Radiant and he can just ban the next senator's right in the round 1. 
    And the second senator can't exercise any rights anymore since his right has been banned. 
    And the third senator comes from Dire and he can ban the first senator's right in the round 1. 
    And in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.
    Note:
    The length of the given string will in the range [1, 10,000].

#################################################################################
Candy	
    There are N children standing in a line. Each child is assigned a rating value.
    You are giving candies to these children subjected to the following requirements:
    Each child must have at least one candy.
    Children with a higher rating get more candies than their neighbors.
    What is the minimum candies you must give?

#################################################################################
Gas Station	
    There are N gas stations along a circular route, where the amount of gas at station i is gas[i].
    You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.
    Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.
    Note:
    The solution is guaranteed to be unique.

#################################################################################
Create Maximum Number	
    Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.
    Example 1:
    nums1 = [3, 4, 6, 5]
    nums2 = [9, 1, 2, 5, 8, 3]
    k = 5
    return [9, 8, 6, 5, 3]
    Example 2:
    nums1 = [6, 7]
    nums2 = [6, 0, 4]
k = 5
return [6, 7, 6, 0, 4]
Example 3:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
return [9, 8, 9]

#################################################################################
Remove Duplicate Letters	
    Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.
    Example:
    Given "bcabc"
    Return "abc"
    Given "cbacdcbc"
    Return "acdb"

#################################################################################
Patching Array	
    Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.
    Example 1:
    nums = [1, 3], n = 6
    Return 1.
    Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
    Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
    Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
    So we only need 1 patch.
    Example 2:
    nums = [1, 5, 10], n = 20
    Return 2.
    The two patches can be [2, 4].
    Example 3:
    nums = [1, 2, 2], n = 5
    Return 0.

#################################################################################
Wiggle Subsequence	
    A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.
    For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.
    Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.
    Examples:
    Input: [1,7,4,9,2,5]
    Output: 6
    The entire sequence is a wiggle sequence.
    Input: [1,17,5,10,13,15,10,5,16,8]
    Output: 7
    There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].
    Input: [1,2,3,4,5,6,7,8,9]
    Output: 2
    Follow up:
    Can you do it in O(n) time?

#################################################################################
IPO
    Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.
    You are given several projects. For each project i, it has a pure profit Pi and a minimum capital of Ci is needed to start the corresponding project. Initially, you have W capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.
    To sum up, pick a list of at most k distinct projects from given projects to maximize your final capital, and output your final maximized capital.
    Example 1:
    Input: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].
    Output: 4
    Explanation: Since your initial capital is 0, you can only start the project indexed 0.
                 After finishing it you will obtain profit 1 and your capital becomes 1.
                 With capital 1, you can either start the project indexed 1 or the project indexed 2.
                 Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.
                 Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.
    Note:
    You may assume all numbers in the input are non-negative integers.
    The length of Profits array and Capital array will not exceed 50,000.
    The answer is guaranteed to fit in a 32-bit signed integer.

#################################################################################
Assign Cookies
    Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.
    Note:
    You may assume the greed factor is always positive. 
    You cannot assign more than one cookie to one child.
    Example 1:
    Input: [1,2,3], [1,1]
    Output: 1
    Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
    And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
    You need to output 1.
    Example 2:
    Input: [1,2], [1,2,3]
    Output: 2
    Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
    You have 3 cookies and their sizes are big enough to gratify all of the children, 
    You need to output 2.

#################################################################################
Best Time to Buy and Sell Stock II
    Say you have an array for which the ith element is the price of a given stock on day i.
    Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

#################################################################################
Employee Free Time	
    We are given a list schedule of employees, which represents the working time for each employee.
    Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.
    Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.
    Example 1:
    Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
    Output: [[3,4]]
    Explanation:
    There are a total of three employees, and all common
    free time intervals would be [-inf, 1], [3, 4], [10, inf].
    We discard any intervals that contain inf as they aren't finite.
    Example 2:
    Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
    Output: [[5,6],[7,9]]
    (Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined.)
    Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.
    Note:
    schedule and schedule[i] are lists with lengths in range [1, 50].
    0 <= schedule[i].start < schedule[i].end <= 10^8.

#################################################################################
Meeting Rooms II 	
    Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.
    For example,
    Given [[0, 30],[5, 10],[15, 20]],
    return 2.
    Solution 1 2 3 4 5 6 7 8
     Definition for an interval.
    public class Interval {
        int start;
        int end;
        Interval() { start = 0; end = 0; }
        Interval(int s, int e) { start = s; end = e; }
    }
     

#################################################################################
Jump Game
    Given an array of non-negative integers, you are initially positioned at the first index of the array.
    Each element in the array represents your maximum jump length at that position.
    Determine if you are able to reach the last index.
    For example:
    A = [2,3,1,1,4], return true.
    A = [3,2,1,0,4], return false.

#################################################################################
Jump Game II
    Given an array of non-negative integers, you are initially positioned at the first index of the array.
    Each element in the array represents your maximum jump length at that position.
    Your goal is to reach the last index in the minimum number of jumps.
    For example:
    Given array A = [2,3,1,1,4]
    The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)
    Note:
    You can assume that you can always reach the last index.

#################################################################################
Task Scheduler	
    Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.
    However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.
    You need to return the least number of intervals the CPU will take to finish all the given tasks.
    Example 1:
    Input: tasks = ["A","A","A","B","B","B"], n = 2
    Output: 8
    Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.
    Note:
    The number of tasks is in the range [1, 10000].
    The integer n is in the range [0, 100].

#################################################################################
Monotone Increasing Digits	
    Given a non-negative integer N, find the largest number that is less than or equal to N with monotone increasing digits.
    (Recall that an integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.)
    Example 1:
    Input: N = 10
    Output: 9
    Example 2:
    Input: N = 1234
    Output: 1234
    Example 3:
    Input: N = 332
    Output: 299
    Note: N is an integer in the range [0, 10^9].

#################################################################################
Set Intersection Size At Least Two	
    An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.
    Find the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has size at least 2.
    Example 1:
    Input: intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]
    Output: 3
    Explanation:
    Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.
    Also, there isn't a smaller size set that fulfills the above condition.
    Thus, we output the size of this set, which is 3.
    Example 2:
    Input: intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]
    Output: 5
    Explanation:
    An example of a minimum sized set is {1, 2, 3, 4, 5}.
    Note:
    intervals will have length in range [1, 3000].
    intervals[i] will have length 2, representing some integer interval.
    intervals[i][j] will be an integer in [0, 10^8].

#################################################################################
Best Time to Buy and Sell Stock with Transaction Fee
    Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.
    You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)
    Return the maximum profit you can make.
    Example 1:
    Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
    Output: 8
    Explanation: The maximum profit can be achieved by:
    Buying at prices[0] = 1
    Selling at prices[3] = 8
    Buying at prices[4] = 4
    Selling at prices[5] = 9
    The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
    Note:
    0 < prices.length <= 50000.
    0 < prices[i] < 50000.
0 <= fee < 50000.

#################################################################################
Wildcard Matching
    Implement wildcard pattern matching with support for '?' and '*'.
    '?' Matches any single character.
    '*' Matches any sequence of characters (including the empty sequence).
    The matching should cover the entire input string (not partial).
    The function prototype should be:
    bool isMatch(const char *s, const char *p)
    Some examples:
    isMatch("aa","a") → false
    isMatch("aa","aa") → true
    isMatch("aaa","aa") → false
    isMatch("aa", "*") → true
    isMatch("aa", "a*") → true
    isMatch("ab", "?*") → true
    isMatch("aab", "c*a*b") → false

#################################################################################
Split Array into Consecutive Subsequences	
    You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.
    Example 1:
    Input: [1,2,3,3,4,5]
    Output: True
    Explanation:
    You can split them into two consecutive subsequences : 
    1, 2, 3
    3, 4, 5
    Example 2:
    Input: [1,2,3,3,4,4,5,5]
    Output: True
    Explanation:
    You can split them into two consecutive subsequences : 
    1, 2, 3, 4, 5
    3, 4, 5
    Example 3:
    Input: [1,2,3,4,4,5]
    Output: False
    Note:
    The length of the input is in range of [1, 10000]

#################################################################################
4 Keys Keyboard 	
    Imagine you have a special keyboard with the following keys:
    Key 1: (A): Print one 'A' on screen.
    Key 2: (Ctrl-A): Select the whole screen.
    Key 3: (Ctrl-C): Copy selection to buffer.
    Key 4: (Ctrl-V): Print buffer on screen appending it after what has already been printed.
    Now, you can only press the keyboard for N times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.
    Example 1:
    Input: N = 3
    Output: 3
    Explanation: 
    We can at most get 3 A's on screen by pressing following key sequence:
    A, A, A
     
    Example 2:
    Input: N = 7
    Output: 9
    Explanation: 
    We can at most get 9 A's on screen by pressing following key sequence:
    A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
     
    Note:
    1 <= N <= 50
    Answers will be in the range of 32-bit signed integer.

#################################################################################
Find Permutation 	
    By now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature "DI" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the "DI" secret signature.
    On the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.
    Example 1:
    Input: "I"
    Output: [1,2]
    Explanation: [1,2] is the only legal initial spectial string can construct secret signature "I", where the number 1 and 2 construct an increasing relationship.
    Example 2:
    Input: "DI"
    Output: [2,1,3]
    Explanation: Both [2,1,3] and [3,1,2] can construct the secret signature "DI", 
        but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]
        Note:
        1.The input string will only contain the character 'D' and 'I'.
        2.The length of input string is a positive integer and will not exceed 10,000

#################################################################################
Minimum Number of Arrows to Burst Balloons	
    There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 104 balloons.
    An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons.
    Example:
    Input:
    [[10,16], [2,8], [1,6], [7,12]]
    Output:
    2
    Explanation:
    One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).

#################################################################################
Non-overlapping Intervals	
    Given a collection of intervals, find the minimum number of intervals you need to remove
    to make the rest of the intervals non-overlapping.
    Note:
    You may assume the interval's end point is always bigger than its start point.
    Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
    Example 1:
    Input: [ [1,2], [2,3], [3,4], [1,3] ]
    Output: 1
    Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
    Example 2:
    Input: [ [1,2], [1,2], [1,2] ]
    Output: 2
    Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
    Example 3:
    Input: [ [1,2], [2,3] ]
    Output: 0
    Explanation: You don't need to remove any of the intervals since they're already
    non-overlapping.

#################################################################################
Queue Reconstruction by Height	
    Suppose you have a random list of people standing in a queue. Each person is described by
    a pair of integers (h, k), where h is the height of the person and k is the number of
    people in front of this person who have a height greater than or equal to h. Write an
    algorithm to reconstruct the queue.
    Note:
    The number of people is less than 1,100.
    Example
    Input:
    [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
    Output:
    [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

#################################################################################
Rearrange String k Distance Apart 	
    Given a non-empty string str and an integer k, rearrange the string such that the same characters are at least distance k from each other.
    All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string "".
    Example:
    str = "aabbcc", k = 3
    Result: "abcabc"
    The same letters are at least distance 3 from each other.

#################################################################################
Remove K Digits	
    Given a non-negative integer num represented as a string, remove k digits from the number
    so that the new number is the smallest possible.
    Note:
    The length of num is less than 10002 and will be ≥ k.
    The given num does not contain any leading zero.
    Example 1:
    Input: num = "1432219", k = 3
    Output: "1219"
    Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the
    smallest.
    Example 2:
    Input: num = "10200", k = 1
    Output: "200"
    Explanation: Remove the leading 1 and the number is 200. Note that the output must not
    contain leading zeroes.
    Example 3:
    Input: num = "10", k = 2
    Output: "0"
    Explanation: Remove all the digits from the number and it is left with nothing which is 0.

#################################################################################
Is Subsequence	
    Given a string s and a string t, check if s is subsequence of t.
    You may assume that there is only lower case English letters in both s and t. t is
    potentially a very long (length ~= 500,000) string, and s is a short string (<=100).
    A subsequence of a string is a new string which is formed from the original string by
    deleting some (can be none) of the characters without disturbing the relative positions of
    the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).
    Example 1:
    s = "abc", t = "ahbgdc"
    Return true.
    Example 2:
    s = "axc", t = "ahbgdc"
    Return false.
    Follow up:
    If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check
    one by one to see if T has its subsequence. In this scenario, how would you change your
    code?

#################################################################################
4 Keys Keyboard 	
Assign Cookies	
Best Time to Buy and Sell Stock II	
Best Time to Buy and Sell Stock with Transaction Fee	
Candy	
Create Maximum Number	
Dota2 Senate	
Employee Free Time	
Find Permutation 	
Gas Station	
IPO	
Is Subsequence	
Jump Game	
Jump Game II	
Meeting Rooms II 	
Minimum Number of Arrows to Burst Balloons	
Monotone Increasing Digits	
Non-overlapping Intervals	
Patching Array	
Queue Reconstruction by Height	
Rearrange String k Distance Apart 	
Remove Duplicate Letters	
Remove K Digits	
Set Intersection Size At Least Two	
Split Array into Consecutive Subsequences	
Task Scheduler	
Wiggle Subsequence	
Wildcard Matching

#################################################################################
vim:tw=90:et:norl:
